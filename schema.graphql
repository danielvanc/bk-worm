type Account {
  id: ID!
  providerType: String
  providerId: String
  providerAccountId: Int
  refreshToken: String
  accessToken: String
  accessTokenExpires: String
  createdAt: String
  updatedAt: String
  user: User
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  providerType: String
  providerType_not: String
  providerType_contains: String
  providerType_not_contains: String
  providerType_starts_with: String
  providerType_not_starts_with: String
  providerType_ends_with: String
  providerType_not_ends_with: String
  providerType_i: String
  providerType_not_i: String
  providerType_contains_i: String
  providerType_not_contains_i: String
  providerType_starts_with_i: String
  providerType_not_starts_with_i: String
  providerType_ends_with_i: String
  providerType_not_ends_with_i: String
  providerType_in: [String]
  providerType_not_in: [String]
  providerId: String
  providerId_not: String
  providerId_contains: String
  providerId_not_contains: String
  providerId_starts_with: String
  providerId_not_starts_with: String
  providerId_ends_with: String
  providerId_not_ends_with: String
  providerId_i: String
  providerId_not_i: String
  providerId_contains_i: String
  providerId_not_contains_i: String
  providerId_starts_with_i: String
  providerId_not_starts_with_i: String
  providerId_ends_with_i: String
  providerId_not_ends_with_i: String
  providerId_in: [String]
  providerId_not_in: [String]
  providerAccountId: Int
  providerAccountId_not: Int
  providerAccountId_lt: Int
  providerAccountId_lte: Int
  providerAccountId_gt: Int
  providerAccountId_gte: Int
  providerAccountId_in: [Int]
  providerAccountId_not_in: [Int]
  refreshToken: String
  refreshToken_not: String
  refreshToken_contains: String
  refreshToken_not_contains: String
  refreshToken_starts_with: String
  refreshToken_not_starts_with: String
  refreshToken_ends_with: String
  refreshToken_not_ends_with: String
  refreshToken_i: String
  refreshToken_not_i: String
  refreshToken_contains_i: String
  refreshToken_not_contains_i: String
  refreshToken_starts_with_i: String
  refreshToken_not_starts_with_i: String
  refreshToken_ends_with_i: String
  refreshToken_not_ends_with_i: String
  refreshToken_in: [String]
  refreshToken_not_in: [String]
  accessToken: String
  accessToken_not: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  accessToken_i: String
  accessToken_not_i: String
  accessToken_contains_i: String
  accessToken_not_contains_i: String
  accessToken_starts_with_i: String
  accessToken_not_starts_with_i: String
  accessToken_ends_with_i: String
  accessToken_not_ends_with_i: String
  accessToken_in: [String]
  accessToken_not_in: [String]
  accessTokenExpires: String
  accessTokenExpires_not: String
  accessTokenExpires_lt: String
  accessTokenExpires_lte: String
  accessTokenExpires_gt: String
  accessTokenExpires_gte: String
  accessTokenExpires_in: [String]
  accessTokenExpires_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
}

input AccountWhereUniqueInput {
  id: ID
  providerId: String
  providerAccountId: Int
}

enum SortAccountsBy {
  id_ASC
  id_DESC
  providerType_ASC
  providerType_DESC
  providerId_ASC
  providerId_DESC
  providerAccountId_ASC
  providerAccountId_DESC
  refreshToken_ASC
  refreshToken_DESC
  accessToken_ASC
  accessToken_DESC
  accessTokenExpires_ASC
  accessTokenExpires_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AccountOrderByInput {
  id: OrderDirection
  providerType: OrderDirection
  providerId: OrderDirection
  providerAccountId: OrderDirection
  refreshToken: OrderDirection
  accessToken: OrderDirection
  accessTokenExpires: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AccountUpdateInput {
  providerType: String
  providerId: String
  providerAccountId: Int
  refreshToken: String
  accessToken: String
  accessTokenExpires: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input AccountsUpdateInput {
  id: ID!
  data: AccountUpdateInput
}

input AccountCreateInput {
  providerType: String
  providerId: String
  providerAccountId: Int
  refreshToken: String
  accessToken: String
  accessTokenExpires: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
}

input AccountsCreateInput {
  data: AccountCreateInput
}

type Session {
  id: ID!
  expires: String
  sessionToken: String
  accessToken: String
  createdAt: String
  updatedAt: String
  user: User
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  expires: String
  expires_not: String
  expires_lt: String
  expires_lte: String
  expires_gt: String
  expires_gte: String
  expires_in: [String]
  expires_not_in: [String]
  sessionToken: String
  sessionToken_not: String
  sessionToken_contains: String
  sessionToken_not_contains: String
  sessionToken_starts_with: String
  sessionToken_not_starts_with: String
  sessionToken_ends_with: String
  sessionToken_not_ends_with: String
  sessionToken_i: String
  sessionToken_not_i: String
  sessionToken_contains_i: String
  sessionToken_not_contains_i: String
  sessionToken_starts_with_i: String
  sessionToken_not_starts_with_i: String
  sessionToken_ends_with_i: String
  sessionToken_not_ends_with_i: String
  sessionToken_in: [String]
  sessionToken_not_in: [String]
  accessToken: String
  accessToken_not: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  accessToken_i: String
  accessToken_not_i: String
  accessToken_contains_i: String
  accessToken_not_contains_i: String
  accessToken_starts_with_i: String
  accessToken_not_starts_with_i: String
  accessToken_ends_with_i: String
  accessToken_not_ends_with_i: String
  accessToken_in: [String]
  accessToken_not_in: [String]
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]
  updatedAt: String
  updatedAt_not: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedAt_in: [String]
  updatedAt_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
}

input SessionWhereUniqueInput {
  id: ID
  sessionToken: String
  accessToken: String
}

enum SortSessionsBy {
  id_ASC
  id_DESC
  expires_ASC
  expires_DESC
  sessionToken_ASC
  sessionToken_DESC
  accessToken_ASC
  accessToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SessionOrderByInput {
  id: OrderDirection
  expires: OrderDirection
  sessionToken: OrderDirection
  accessToken: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SessionUpdateInput {
  expires: String
  sessionToken: String
  accessToken: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
}

input SessionsUpdateInput {
  id: ID!
  data: SessionUpdateInput
}

input SessionCreateInput {
  expires: String
  sessionToken: String
  accessToken: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneInput
}

input SessionsCreateInput {
  data: SessionCreateInput
}

type VerificationRequest {
  id: ID!
  identifier: String
  token: String
  expires: String
}

input VerificationRequestWhereInput {
  AND: [VerificationRequestWhereInput!]
  OR: [VerificationRequestWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  identifier: String
  identifier_not: String
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
  identifier_i: String
  identifier_not_i: String
  identifier_contains_i: String
  identifier_not_contains_i: String
  identifier_starts_with_i: String
  identifier_not_starts_with_i: String
  identifier_ends_with_i: String
  identifier_not_ends_with_i: String
  identifier_in: [String]
  identifier_not_in: [String]
  token: String
  token_not: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  token_i: String
  token_not_i: String
  token_contains_i: String
  token_not_contains_i: String
  token_starts_with_i: String
  token_not_starts_with_i: String
  token_ends_with_i: String
  token_not_ends_with_i: String
  token_in: [String]
  token_not_in: [String]
  expires: String
  expires_not: String
  expires_lt: String
  expires_lte: String
  expires_gt: String
  expires_gte: String
  expires_in: [String]
  expires_not_in: [String]
}

input VerificationRequestWhereUniqueInput {
  id: ID
  identifier: String
  token: String
}

enum SortVerificationRequestsBy {
  id_ASC
  id_DESC
  identifier_ASC
  identifier_DESC
  token_ASC
  token_DESC
  expires_ASC
  expires_DESC
}

input VerificationRequestOrderByInput {
  id: OrderDirection
  identifier: OrderDirection
  token: OrderDirection
  expires: OrderDirection
}

input VerificationRequestUpdateInput {
  identifier: String
  token: String
  expires: String
}

input VerificationRequestsUpdateInput {
  id: ID!
  data: VerificationRequestUpdateInput
}

input VerificationRequestCreateInput {
  identifier: String
  token: String
  expires: String
}

input VerificationRequestsCreateInput {
  data: VerificationRequestCreateInput
}

type User {
  id: ID!
  name: String
  age: String
  title: String
  location: String
  email: String
  emailVerified: String
  image: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
  accounts(
    where: AccountWhereInput! = {}
    search: String
    sortBy: [SortAccountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Account!]
  _accountsMeta(
    where: AccountWhereInput! = {}
    search: String
    sortBy: [SortAccountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use accountsCount instead."
    )
  accountsCount(where: AccountWhereInput! = {}): Int
  sessions(
    where: SessionWhereInput! = {}
    search: String
    sortBy: [SortSessionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SessionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Session!]
  _sessionsMeta(
    where: SessionWhereInput! = {}
    search: String
    sortBy: [SortSessionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SessionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use sessionsCount instead."
    )
  sessionsCount(where: SessionWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  age: String
  age_not: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  age_i: String
  age_not_i: String
  age_contains_i: String
  age_not_contains_i: String
  age_starts_with_i: String
  age_not_starts_with_i: String
  age_ends_with_i: String
  age_not_ends_with_i: String
  age_in: [String]
  age_not_in: [String]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  location: String
  location_not: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  location_i: String
  location_not_i: String
  location_contains_i: String
  location_not_contains_i: String
  location_starts_with_i: String
  location_not_starts_with_i: String
  location_ends_with_i: String
  location_not_ends_with_i: String
  location_in: [String]
  location_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  emailVerified: String
  emailVerified_not: String
  emailVerified_lt: String
  emailVerified_lte: String
  emailVerified_gt: String
  emailVerified_gte: String
  emailVerified_in: [String]
  emailVerified_not_in: [String]
  image: String
  image_not: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  image_i: String
  image_not_i: String
  image_contains_i: String
  image_not_contains_i: String
  image_starts_with_i: String
  image_not_starts_with_i: String
  image_ends_with_i: String
  image_not_ends_with_i: String
  image_in: [String]
  image_not_in: [String]
  password_is_set: Boolean
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  age_ASC
  age_DESC
  title_ASC
  title_DESC
  location_ASC
  location_DESC
  email_ASC
  email_DESC
  emailVerified_ASC
  emailVerified_DESC
  image_ASC
  image_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  age: OrderDirection
  title: OrderDirection
  location: OrderDirection
  email: OrderDirection
  emailVerified: OrderDirection
  image: OrderDirection
}

input UserUpdateInput {
  name: String
  age: String
  title: String
  location: String
  email: String
  emailVerified: String
  image: String
  password: String
  posts: PostRelateToManyInput
  accounts: AccountRelateToManyInput
  sessions: SessionRelateToManyInput
}

input PostRelateToManyInput {
  create: [PostCreateInput]
  connect: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  disconnectAll: Boolean
}

input AccountRelateToManyInput {
  create: [AccountCreateInput]
  connect: [AccountWhereUniqueInput]
  disconnect: [AccountWhereUniqueInput]
  disconnectAll: Boolean
}

input SessionRelateToManyInput {
  create: [SessionCreateInput]
  connect: [SessionWhereUniqueInput]
  disconnect: [SessionWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  age: String
  title: String
  location: String
  email: String
  emailVerified: String
  image: String
  password: String
  posts: PostRelateToManyInput
  accounts: AccountRelateToManyInput
  sessions: SessionRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
  tags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]
  _tagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input TagRelateToManyInput {
  create: [TagCreateInput]
  connect: [TagWhereUniqueInput]
  disconnect: [TagWhereUniqueInput]
  disconnectAll: Boolean
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input PostsCreateInput {
  data: PostCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

enum SortTagsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsUpdateInput {
  id: ID!
  data: TagUpdateInput
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsCreateInput {
  data: TagCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAccount(data: AccountCreateInput): Account
  createAccounts(data: [AccountsCreateInput]): [Account]
  updateAccount(id: ID!, data: AccountUpdateInput): Account
  updateAccounts(data: [AccountsUpdateInput]): [Account]
  deleteAccount(id: ID!): Account
  deleteAccounts(ids: [ID!]): [Account]
  createSession(data: SessionCreateInput): Session
  createSessions(data: [SessionsCreateInput]): [Session]
  updateSession(id: ID!, data: SessionUpdateInput): Session
  updateSessions(data: [SessionsUpdateInput]): [Session]
  deleteSession(id: ID!): Session
  deleteSessions(ids: [ID!]): [Session]
  createVerificationRequest(
    data: VerificationRequestCreateInput
  ): VerificationRequest
  createVerificationRequests(
    data: [VerificationRequestsCreateInput]
  ): [VerificationRequest]
  updateVerificationRequest(
    id: ID!
    data: VerificationRequestUpdateInput
  ): VerificationRequest
  updateVerificationRequests(
    data: [VerificationRequestsUpdateInput]
  ): [VerificationRequest]
  deleteVerificationRequest(id: ID!): VerificationRequest
  deleteVerificationRequests(ids: [ID!]): [VerificationRequest]
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createPost(data: PostCreateInput): Post
  createPosts(data: [PostsCreateInput]): [Post]
  updatePost(id: ID!, data: PostUpdateInput): Post
  updatePosts(data: [PostsUpdateInput]): [Post]
  deletePost(id: ID!): Post
  deletePosts(ids: [ID!]): [Post]
  createTag(data: TagCreateInput): Tag
  createTags(data: [TagsCreateInput]): [Tag]
  updateTag(id: ID!, data: TagUpdateInput): Tag
  updateTags(data: [TagsUpdateInput]): [Tag]
  deleteTag(id: ID!): Tag
  deleteTags(ids: [ID!]): [Tag]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  allAccounts(
    where: AccountWhereInput! = {}
    search: String
    sortBy: [SortAccountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Account!]
  Account(where: AccountWhereUniqueInput!): Account
  _allAccountsMeta(
    where: AccountWhereInput! = {}
    search: String
    sortBy: [SortAccountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use accountsCount instead."
    )
  accountsCount(where: AccountWhereInput! = {}): Int
  allSessions(
    where: SessionWhereInput! = {}
    search: String
    sortBy: [SortSessionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SessionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Session!]
  Session(where: SessionWhereUniqueInput!): Session
  _allSessionsMeta(
    where: SessionWhereInput! = {}
    search: String
    sortBy: [SortSessionsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SessionOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use sessionsCount instead."
    )
  sessionsCount(where: SessionWhereInput! = {}): Int
  allVerificationRequests(
    where: VerificationRequestWhereInput! = {}
    search: String
    sortBy: [SortVerificationRequestsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VerificationRequestOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [VerificationRequest!]
  VerificationRequest(
    where: VerificationRequestWhereUniqueInput!
  ): VerificationRequest
  _allVerificationRequestsMeta(
    where: VerificationRequestWhereInput! = {}
    search: String
    sortBy: [SortVerificationRequestsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VerificationRequestOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use verificationRequestsCount instead."
    )
  verificationRequestsCount(where: VerificationRequestWhereInput! = {}): Int
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  Post(where: PostWhereUniqueInput!): Post
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
  allTags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]
  Tag(where: TagWhereUniqueInput!): Tag
  _allTagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
